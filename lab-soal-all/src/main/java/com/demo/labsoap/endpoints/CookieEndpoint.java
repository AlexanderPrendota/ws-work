package com.demo.labsoap.endpoints;

import com.demo.autogenerated.*;
import com.demo.autogenerated.GetCookieResponse.Cookies;
import com.demo.labsoap.exceptions.ServiceFault;
import com.demo.labsoap.exceptions.ServiceFaultException;
import com.demo.labsoap.exceptions.ValidationException;
import com.demo.labsoap.service.CookieService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ws.server.endpoint.annotation.Endpoint;
import org.springframework.ws.server.endpoint.annotation.PayloadRoot;
import org.springframework.ws.server.endpoint.annotation.RequestPayload;
import org.springframework.ws.server.endpoint.annotation.ResponsePayload;

import java.util.List;


@Endpoint
public class CookieEndpoint {

    private static final String NAMESPACE_URI = "http://demo.com/autogenerated";

    private static transient Logger logger = LoggerFactory.getLogger(CookieEndpoint.class);

    @Autowired
    private CookieService cookieService;

    @PayloadRoot(namespace = NAMESPACE_URI, localPart = "createCookieRequest")
    @ResponsePayload
    public CreateCookieResponse createCookie(@RequestPayload CreateCookieRequest request) {
        CreateCookieResponse response = new CreateCookieResponse();
        int id = cookieService.createCookie(request.getWeight(), request.getName(),
                request.getRadius(), request.getCountry());
        response.setNewId(id);
        return response;
    }

    @PayloadRoot(namespace = NAMESPACE_URI, localPart = "updateCookieRequest")
    @ResponsePayload
    public UpdateCookieResponse updateCookie(@RequestPayload UpdateCookieRequest request) {
        UpdateCookieResponse response = new UpdateCookieResponse();
        try {
            cookieService.modifyCookie(request.getId(), request.getWeight(), request.getName(),
                    request.getRadius(), request.getCountry());
            response.setResult("DONE");
        } catch (ValidationException ve) {
            logger.info("Validation exception: " + ve.getMessage());
            throw new ServiceFaultException("ERROR", new ServiceFault(
                    "NOT_UPDATED", ve.getMessage()));
        }
        return response;
    }

    @PayloadRoot(namespace = NAMESPACE_URI, localPart = "deleteCookieRequest")
    @ResponsePayload
    public DeleteCookieResponse deleteCookie(@RequestPayload DeleteCookieRequest request) {
        logger.info("A new received delete-request for id={}", request.getId());
        DeleteCookieResponse response = new DeleteCookieResponse();
        try {
            cookieService.deleteCookie(request.getId());
            response.setResult("DONE");
        } catch (ValidationException ve) {
            throw new ServiceFaultException("ERROR", new ServiceFault(
                    "NOT_UPDATED", ve.getMessage()));
        }
        return response;
    }

    @PayloadRoot(namespace = NAMESPACE_URI, localPart = "getCookieRequest")
    @ResponsePayload
    public GetCookieResponse getCookie(@RequestPayload GetCookieRequest request) {
        GetCookieResponse response = new GetCookieResponse();
        try {
            List<Cookie> cookies = cookieService.getCookieByParams(request.getId(), request.getWeight(),
                    request.getName(), request.getRadius(), request.getCountry());
            response.setCookies(new Cookies());
            for (Cookie cookie : cookies) {
                response.getCookies().getCookie().add(cookie);
            }
        } catch (ValidationException ve) {
            throw new ServiceFaultException("ERROR", new ServiceFault(
                    "NOT_FOUND", ve.getMessage()));
        }
        return response;
    }
}
