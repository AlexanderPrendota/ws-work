package com.demo.labsoap.dao;

import com.demo.autogenerated.Cookie;
import com.demo.labsoap.exceptions.ValidationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

@Repository
public class CookieDao {

    @Autowired
    JdbcTemplate jdbcTemplate;

    public Cookie getCookieById(Integer id) {
        String sql = "SELECT * FROM `cookies` WHERE `id` = ? ;";
        return jdbcTemplate.queryForObject(sql, new CookieRowMapper(), id);
    }

    public int insertCookie(String weight, String name, String radius, String country) {
        String sql = "INSERT INTO `cookies`(`name`, `radius`, `weight`, `country`) VALUES"
                + " (?, ?, ?, ?)";
        jdbcTemplate.update(sql, name, radius, weight, country);

        sql = "SELECT max(id) FROM `cookies`;";
        return jdbcTemplate.queryForObject(sql, Integer.class);
    }

    public List<Cookie> getCookieByParams(Integer id, String weight, String name, String radius, String country) throws ValidationException {
        checkId(id);
        if (id == null && weight == null && name == null
                && radius == null && country == null)
            throw new ValidationException("No parameters for searching found");

        String sql = "SELECT * FROM `cookies` WHERE" +
                (id == null ? "" : (" `id` = " + id)) +
                (weight == null ? "" : (" `weight` = '" + weight + "'")) +
                (name == null ? "" : (" `name` = '" + name + "'")) +
                (radius == null ? "" : (" `radius` = '" + radius + "'")) +
                (country == null ? "" : (" `country` = '" + country + "'"));
        return jdbcTemplate.query(sql, new CookieRowMapper());
    }

    public void modifyCookie(Integer id, String weight, String name, String radius, String country) throws ValidationException {
        checkId(id);
        String sql = "UPDATE `cookies` SET " +
                "`name` = " + (name == null ? "''," : ("'" + name + "',")) +
                "`radius` = " + (radius == null ? "''," : ("'" + radius + "',")) +
                "`weight` = " + (weight == null ? "''," : ("'" + weight + "',")) +
                "`country` = " + (country == null ? "''" : ("'" + country + "'")) +
                " WHERE `id` = " + id.toString() + ";";

        jdbcTemplate.update(sql);
    }

    public void deleteCookie(Integer id) throws ValidationException {
        checkId(id);
        String sql = "DELETE FROM `cookies` WHERE `id` = " + id.toString() + ";";
        jdbcTemplate.update(sql);
    }

    private void checkId(Integer id) throws ValidationException {
        if (id == null || id < 1) throw new ValidationException("Wrong ID value");
    }
}


class CookieRowMapper implements RowMapper<Cookie> {

    @Override
    public Cookie mapRow(ResultSet rs, int rowNum) throws SQLException {
        Cookie cookie = new Cookie();
        cookie.setId(rs.getInt("id"));
        cookie.setRadius(rs.getString("radius"));
        cookie.setCountry(rs.getString("country"));
        cookie.setName(rs.getString("name"));
        cookie.setWeight(rs.getString("weight"));
        return cookie;
    }
}

